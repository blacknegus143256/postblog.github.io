<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Profile</a>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/logout">Log Out</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container my-5">
        <h2>Create a New Post</h2>
        <form id="post-form" action="/api/posts" method="POST" enctype="multipart/form-data">
            <div class="mb-3">
                <label for="content" class="form-label">Content</label>
                <textarea id="content" name="content" class="form-control" required></textarea>
            </div>
            <div class="mb-3">
                <label for="fileUpload" class="form-label">File Upload</label>
                <input type="file" id="fileUpload" name="fileUpload" class="form-control" placeholder="Optional">
            </div>
            <button type="submit" class="btn btn-primary">Post</button>
        </form>

        <h2 class="mt-5">Your Posts</h2>
        <div id="user-posts-container">
            <!-- User posts will be loaded here -->
        </div>
    </div>

    <!-- Edit Post Form (Initially Hidden) -->
    <div class="container my-3" id="edit-post-form-container" style="display: none;">
        <h3>Edit Post</h3>
        <form id="edit-post-form" enctype="multipart/form-data">
            <div class="mb-3">
                <label for="edit-content" class="form-label">Content</label>
                <textarea id="edit-content" name="content" class="form-control" required></textarea> <!-- Ensure 'name' is set -->
            </div>
            <div class="mb-3">
                <label for="edit-fileUpload" class="form-label">Change Image (optional)</label>
                <input type="file" id="edit-fileUpload" name="fileUpload" class="form-control"> <!-- Ensure 'name' matches your upload handling -->
            </div>
            <button type="button" class="btn btn-primary" onclick="submitEditPost()">Save Changes</button>
        </form>
    </div>

    <script>
        let currentEditPostId = null; // To track the post being edited

        async function loadUserPosts() {
            const response = await fetch('/api/posts/user/posts');
            const posts = await response.json();
            const container = document.getElementById('user-posts-container');
            container.innerHTML = '';

            posts.forEach(post => {
                const postElement = document.createElement('div');
                postElement.classList.add('card', 'mb-3');
                postElement.innerHTML = `
                    <div class="card-body">
                        <h5 class="card-title">${post.content}</h5>
                        ${post.image ? `<img src="/uploads/${post.image}" class="img-fluid mt-2">` : ''}
                        <button onclick="showEditForm(${post.id}, '${post.content}')" class="btn btn-warning btn-sm">Edit</button>
                        <button onclick="deletePost(${post.id})" class="btn btn-danger btn-sm">Delete</button>
                    </div>
                `;
                container.appendChild(postElement);
            });
        }

        function showEditForm(postId, content) {
    currentEditPostId = postId; // Set the ID of the post being edited
    document.getElementById('edit-content').value = content; // Pre-fill content in the form
    document.getElementById('edit-post-form-container').style.display = 'block'; // Show the edit form
}


        function cancelEdit() {
            document.getElementById('edit-post-form-container').style.display = 'none'; // Hide the edit form
            currentEditPostId = null; // Reset the current edit post ID
        }

        async function submitEditPost() {
    const formData = new FormData(document.getElementById('edit-post-form'));
    
    try {
        const response = await fetch(`/api/post/${currentEditPostId}`, { // Ensure this matches your API route
            method: 'PUT',
            body: formData,
        });x    
        
        if (!response.ok) {
            const errorResponse = await response.json();
            throw new Error(errorResponse.error || 'Failed to edit post');
        }

        loadUserPosts(); // Refresh posts after successful edit
        cancelEdit(); // Close the edit form after submission
    } catch (error) {
        console.error('Error editing post:', error);
        alert(error.message); // Show an alert for easier debugging
    }
}
        async function deletePost(postId) {
            if (confirm("Are you sure you want to delete this post?")) {
                try {
                    const response = await fetch(`/api/post/${postId}`, { method: 'DELETE' });
                    if (!response.ok) {
                        throw new Error("Failed to delete post");
                    }
                    loadUserPosts(); // Refresh posts after deletion
                } catch (error) {
                    console.error("Error deleting post:", error);
                }
            }
        }

        document.getElementById('post-form').addEventListener('submit', async function (event) {
            event.preventDefault();
            const formData = new FormData(this);

            try {
                const response = await fetch('/api/posts', {
                    method: 'POST',
                    body: formData,
                });

                if (!response.ok) {
                    throw new Error('Failed to create post');
                }

                loadUserPosts();
                this.reset(); // Reset the form after submission
            } catch (error) {
                console.error('Error creating post:', error);
            }
        });

        loadUserPosts(); // Load posts on page load
    </script>
</body>
</html>
